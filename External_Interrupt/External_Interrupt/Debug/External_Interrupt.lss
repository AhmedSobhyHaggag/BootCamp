
External_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af1  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000766  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000669  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053b  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000028f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
  74:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	else if (PinNum>=PC0 && PinNum<=PC7)
	return (GET_BIT(PINC,(PinNum-PC0 ) ) );
	
	else if (PinNum>=PD0 && PinNum<=PD7)
	return (GET_BIT(PIND, (PinNum-PD0 ) ) );
}
  7c:	61 30       	cpi	r22, 0x01	; 1
  7e:	09 f0       	breq	.+2      	; 0x82 <DIO_WritePin+0x6>
  80:	43 c0       	rjmp	.+134    	; 0x108 <DIO_WritePin+0x8c>
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	68 f4       	brcc	.+26     	; 0xa0 <DIO_WritePin+0x24>
  86:	4b b3       	in	r20, 0x1b	; 27
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	b9 01       	movw	r22, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_WritePin+0x18>
  90:	66 0f       	add	r22, r22
  92:	77 1f       	adc	r23, r23
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_WritePin+0x14>
  98:	cb 01       	movw	r24, r22
  9a:	84 2b       	or	r24, r20
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
  a0:	98 ef       	ldi	r25, 0xF8	; 248
  a2:	98 0f       	add	r25, r24
  a4:	98 30       	cpi	r25, 0x08	; 8
  a6:	68 f4       	brcc	.+26     	; 0xc2 <DIO_WritePin+0x46>
  a8:	48 b3       	in	r20, 0x18	; 24
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	b9 01       	movw	r22, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_WritePin+0x3a>
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	9a 95       	dec	r25
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_WritePin+0x36>
  ba:	cb 01       	movw	r24, r22
  bc:	84 2b       	or	r24, r20
  be:	88 bb       	out	0x18, r24	; 24
  c0:	08 95       	ret
  c2:	90 ef       	ldi	r25, 0xF0	; 240
  c4:	98 0f       	add	r25, r24
  c6:	98 30       	cpi	r25, 0x08	; 8
  c8:	68 f4       	brcc	.+26     	; 0xe4 <DIO_WritePin+0x68>
  ca:	45 b3       	in	r20, 0x15	; 21
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	b9 01       	movw	r22, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_WritePin+0x5c>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	9a 95       	dec	r25
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_WritePin+0x58>
  dc:	cb 01       	movw	r24, r22
  de:	84 2b       	or	r24, r20
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	08 95       	ret
  e4:	98 ee       	ldi	r25, 0xE8	; 232
  e6:	98 0f       	add	r25, r24
  e8:	98 30       	cpi	r25, 0x08	; 8
  ea:	08 f0       	brcs	.+2      	; 0xee <DIO_WritePin+0x72>
  ec:	54 c0       	rjmp	.+168    	; 0x196 <DIO_WritePin+0x11a>
  ee:	42 b3       	in	r20, 0x12	; 18
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_WritePin+0x80>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	9a 95       	dec	r25
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_WritePin+0x7c>
 100:	cb 01       	movw	r24, r22
 102:	84 2b       	or	r24, r20
 104:	82 bb       	out	0x12, r24	; 18
 106:	08 95       	ret
 108:	61 11       	cpse	r22, r1
 10a:	45 c0       	rjmp	.+138    	; 0x196 <DIO_WritePin+0x11a>
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	70 f4       	brcc	.+28     	; 0x12c <DIO_WritePin+0xb0>
 110:	4b b3       	in	r20, 0x1b	; 27
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_WritePin+0xa2>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_WritePin+0x9e>
 122:	cb 01       	movw	r24, r22
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	08 95       	ret
 12c:	98 ef       	ldi	r25, 0xF8	; 248
 12e:	98 0f       	add	r25, r24
 130:	98 30       	cpi	r25, 0x08	; 8
 132:	70 f4       	brcc	.+28     	; 0x150 <DIO_WritePin+0xd4>
 134:	48 b3       	in	r20, 0x18	; 24
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_WritePin+0xc6>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	9a 95       	dec	r25
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_WritePin+0xc2>
 146:	cb 01       	movw	r24, r22
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	08 95       	ret
 150:	90 ef       	ldi	r25, 0xF0	; 240
 152:	98 0f       	add	r25, r24
 154:	98 30       	cpi	r25, 0x08	; 8
 156:	70 f4       	brcc	.+28     	; 0x174 <DIO_WritePin+0xf8>
 158:	45 b3       	in	r20, 0x15	; 21
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_WritePin+0xea>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	9a 95       	dec	r25
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_WritePin+0xe6>
 16a:	cb 01       	movw	r24, r22
 16c:	80 95       	com	r24
 16e:	84 23       	and	r24, r20
 170:	85 bb       	out	0x15, r24	; 21
 172:	08 95       	ret
 174:	98 ee       	ldi	r25, 0xE8	; 232
 176:	98 0f       	add	r25, r24
 178:	98 30       	cpi	r25, 0x08	; 8
 17a:	68 f4       	brcc	.+26     	; 0x196 <DIO_WritePin+0x11a>
 17c:	42 b3       	in	r20, 0x12	; 18
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_WritePin+0x10e>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	9a 95       	dec	r25
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_WritePin+0x10a>
 18e:	cb 01       	movw	r24, r22
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	82 bb       	out	0x12, r24	; 18
 196:	08 95       	ret

00000198 <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if (PinDirection == OUTPUT)
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_SetPinDirection+0x6>
 19c:	43 c0       	rjmp	.+134    	; 0x224 <DIO_SetPinDirection+0x8c>
	{
		if(PinNum>=PA0 && PinNum<=PA7)
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	68 f4       	brcc	.+26     	; 0x1bc <DIO_SetPinDirection+0x24>
		SET_BIT(DDRA,(PinNum) );
 1a2:	4a b3       	in	r20, 0x1a	; 26
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDirection+0x18>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDirection+0x14>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 2b       	or	r24, r20
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	08 95       	ret
		
		else if (PinNum>=PB0 && PinNum<=PB7)
 1bc:	98 ef       	ldi	r25, 0xF8	; 248
 1be:	98 0f       	add	r25, r24
 1c0:	98 30       	cpi	r25, 0x08	; 8
 1c2:	68 f4       	brcc	.+26     	; 0x1de <DIO_SetPinDirection+0x46>
		SET_BIT(DDRB,(PinNum-PB0) );
 1c4:	47 b3       	in	r20, 0x17	; 23
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinDirection+0x3a>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	9a 95       	dec	r25
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinDirection+0x36>
 1d6:	cb 01       	movw	r24, r22
 1d8:	84 2b       	or	r24, r20
 1da:	87 bb       	out	0x17, r24	; 23
 1dc:	08 95       	ret
		
		else if (PinNum>=PC0 && PinNum<=PC7)
 1de:	90 ef       	ldi	r25, 0xF0	; 240
 1e0:	98 0f       	add	r25, r24
 1e2:	98 30       	cpi	r25, 0x08	; 8
 1e4:	68 f4       	brcc	.+26     	; 0x200 <DIO_SetPinDirection+0x68>
		SET_BIT(DDRC,(PinNum-PC0) );
 1e6:	44 b3       	in	r20, 0x14	; 20
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinDirection+0x5c>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	9a 95       	dec	r25
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinDirection+0x58>
 1f8:	cb 01       	movw	r24, r22
 1fa:	84 2b       	or	r24, r20
 1fc:	84 bb       	out	0x14, r24	; 20
 1fe:	08 95       	ret
		
		else if (PinNum>=PD0 && PinNum<=PD7)
 200:	98 ee       	ldi	r25, 0xE8	; 232
 202:	98 0f       	add	r25, r24
 204:	98 30       	cpi	r25, 0x08	; 8
 206:	08 f0       	brcs	.+2      	; 0x20a <DIO_SetPinDirection+0x72>
 208:	54 c0       	rjmp	.+168    	; 0x2b2 <DIO_SetPinDirection+0x11a>
		SET_BIT(DDRD,(PinNum-PD0) );
 20a:	41 b3       	in	r20, 0x11	; 17
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	b9 01       	movw	r22, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SetPinDirection+0x80>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	9a 95       	dec	r25
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SetPinDirection+0x7c>
 21c:	cb 01       	movw	r24, r22
 21e:	84 2b       	or	r24, r20
 220:	81 bb       	out	0x11, r24	; 17
 222:	08 95       	ret
	}
	
	else if (PinDirection == INPUT)
 224:	61 11       	cpse	r22, r1
 226:	45 c0       	rjmp	.+138    	; 0x2b2 <DIO_SetPinDirection+0x11a>
	{
		if(PinNum>=PA0 && PinNum<=PA7)
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	70 f4       	brcc	.+28     	; 0x248 <DIO_SetPinDirection+0xb0>
		CLEAR_BIT(DDRA,PinNum);
 22c:	4a b3       	in	r20, 0x1a	; 26
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDirection+0xa2>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDirection+0x9e>
 23e:	cb 01       	movw	r24, r22
 240:	80 95       	com	r24
 242:	84 23       	and	r24, r20
 244:	8a bb       	out	0x1a, r24	; 26
 246:	08 95       	ret
		
		else if (PinNum>=PB0 && PinNum<=PB7)
 248:	98 ef       	ldi	r25, 0xF8	; 248
 24a:	98 0f       	add	r25, r24
 24c:	98 30       	cpi	r25, 0x08	; 8
 24e:	70 f4       	brcc	.+28     	; 0x26c <DIO_SetPinDirection+0xd4>
		CLEAR_BIT(DDRB,(PinNum-PB0));
 250:	47 b3       	in	r20, 0x17	; 23
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDirection+0xc6>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	9a 95       	dec	r25
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDirection+0xc2>
 262:	cb 01       	movw	r24, r22
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	87 bb       	out	0x17, r24	; 23
 26a:	08 95       	ret
		
		else if (PinNum>=PC0 && PinNum<=PC7)
 26c:	90 ef       	ldi	r25, 0xF0	; 240
 26e:	98 0f       	add	r25, r24
 270:	98 30       	cpi	r25, 0x08	; 8
 272:	70 f4       	brcc	.+28     	; 0x290 <DIO_SetPinDirection+0xf8>
		CLEAR_BIT(DDRC,(PinNum-PC0));
 274:	44 b3       	in	r20, 0x14	; 20
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinDirection+0xea>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	9a 95       	dec	r25
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinDirection+0xe6>
 286:	cb 01       	movw	r24, r22
 288:	80 95       	com	r24
 28a:	84 23       	and	r24, r20
 28c:	84 bb       	out	0x14, r24	; 20
 28e:	08 95       	ret
		
		else if (PinNum>=PD0 && PinNum<=PD7)
 290:	98 ee       	ldi	r25, 0xE8	; 232
 292:	98 0f       	add	r25, r24
 294:	98 30       	cpi	r25, 0x08	; 8
 296:	68 f4       	brcc	.+26     	; 0x2b2 <DIO_SetPinDirection+0x11a>
		CLEAR_BIT(DDRD,(PinNum-PD0));
 298:	41 b3       	in	r20, 0x11	; 17
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	b9 01       	movw	r22, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SetPinDirection+0x10e>
 2a2:	66 0f       	add	r22, r22
 2a4:	77 1f       	adc	r23, r23
 2a6:	9a 95       	dec	r25
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SetPinDirection+0x10a>
 2aa:	cb 01       	movw	r24, r22
 2ac:	80 95       	com	r24
 2ae:	84 23       	and	r24, r20
 2b0:	81 bb       	out	0x11, r24	; 17
 2b2:	08 95       	ret

000002b4 <Test_External_Interrupt>:
uint8  volatile state;


void Test_External_Interrupt()
{
	        INIT_INT2();
 2b4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <INIT_INT2>
	        
	        DIO_SetPinDirection(PB5,OUTPUT);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	8d e0       	ldi	r24, 0x0D	; 13
 2bc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinDirection>
	        DIO_SetPinDirection(PB6,OUTPUT);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	8e e0       	ldi	r24, 0x0E	; 14
 2c4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinDirection>
	        DIO_SetPinDirection(PB7,OUTPUT);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	8f e0       	ldi	r24, 0x0F	; 15
 2cc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinDirection>


	        
	        while(1)
	        {
		        switch(state)
 2d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	d1 f0       	breq	.+52     	; 0x30c <Test_External_Interrupt+0x58>
 2d8:	18 f0       	brcs	.+6      	; 0x2e0 <Test_External_Interrupt+0x2c>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	69 f1       	breq	.+90     	; 0x338 <Test_External_Interrupt+0x84>
 2de:	f8 cf       	rjmp	.-16     	; 0x2d0 <Test_External_Interrupt+0x1c>
		        {
			        case 0: DIO_WritePin(PB5,HIGH); DIO_WritePin(PB6,LOW);  DIO_WritePin(PB7,LOW); //Flag=0;
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	8d e0       	ldi	r24, 0x0D	; 13
 2e4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	8e e0       	ldi	r24, 0x0E	; 14
 2ec:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	8f e0       	ldi	r24, 0x0F	; 15
 2f4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	2f e3       	ldi	r18, 0x3F	; 63
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	93 e0       	ldi	r25, 0x03	; 3
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <Test_External_Interrupt+0x4a>
 306:	00 c0       	rjmp	.+0      	; 0x308 <Test_External_Interrupt+0x54>
 308:	00 00       	nop
 30a:	e2 cf       	rjmp	.-60     	; 0x2d0 <Test_External_Interrupt+0x1c>
			        _delay_ms(1000);
			        break;
			        
			        case 1: DIO_WritePin(PB6,HIGH); DIO_WritePin(PB5,LOW);  DIO_WritePin(PB7,LOW);//Flag=0;
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8e e0       	ldi	r24, 0x0E	; 14
 310:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 324:	2f e3       	ldi	r18, 0x3F	; 63
 326:	8d e0       	ldi	r24, 0x0D	; 13
 328:	93 e0       	ldi	r25, 0x03	; 3
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <Test_External_Interrupt+0x76>
 332:	00 c0       	rjmp	.+0      	; 0x334 <Test_External_Interrupt+0x80>
 334:	00 00       	nop
 336:	cc cf       	rjmp	.-104    	; 0x2d0 <Test_External_Interrupt+0x1c>
			        _delay_ms(1000);
			        break;
			        
			        case 2: DIO_WritePin(PB7,HIGH); DIO_WritePin(PB6,LOW);  DIO_WritePin(PB5,LOW);//Flag=0;
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	8f e0       	ldi	r24, 0x0F	; 15
 33c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	8e e0       	ldi	r24, 0x0E	; 14
 344:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	8d e0       	ldi	r24, 0x0D	; 13
 34c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 350:	2f e3       	ldi	r18, 0x3F	; 63
 352:	8d e0       	ldi	r24, 0x0D	; 13
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	21 50       	subi	r18, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <Test_External_Interrupt+0xa2>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <Test_External_Interrupt+0xac>
 360:	00 00       	nop
 362:	b6 cf       	rjmp	.-148    	; 0x2d0 <Test_External_Interrupt+0x1c>

00000364 <__vector_3>:
	        }
}


ISR(INT2_vect)
{		 
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
		 if(state==0) state=1;
 370:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 374:	81 11       	cpse	r24, r1
 376:	04 c0       	rjmp	.+8      	; 0x380 <__vector_3+0x1c>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 37e:	0e c0       	rjmp	.+28     	; 0x39c <__vector_3+0x38>
		 else if(state==1) state=2;
 380:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	21 f4       	brne	.+8      	; 0x390 <__vector_3+0x2c>
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 38e:	06 c0       	rjmp	.+12     	; 0x39c <__vector_3+0x38>
		 else if(state==2) state=0;
 390:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	11 f4       	brne	.+4      	; 0x39c <__vector_3+0x38>
 398:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
}
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <main>:


int main(void)
{	
	Test_External_Interrupt();
 3a8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Test_External_Interrupt>

000003ac <INIT_INT2>:
}

/* Function to initialize External INT2*/
void INIT_INT2()
{
 DIO_SetPinDirection(PUSH_B1_INT2,INPUT);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinDirection>
 SET_BIT(GICR,INT2);
 3b4:	8b b7       	in	r24, 0x3b	; 59
 3b6:	80 62       	ori	r24, 0x20	; 32
 3b8:	8b bf       	out	0x3b, r24	; 59
 SET_BIT(MCUCSR,ISC2);
 3ba:	84 b7       	in	r24, 0x34	; 52
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	84 bf       	out	0x34, r24	; 52
 SET_BIT(SREG,GIE);
 3c0:	8f b7       	in	r24, 0x3f	; 63
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	8f bf       	out	0x3f, r24	; 63
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>

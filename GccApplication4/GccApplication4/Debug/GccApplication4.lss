
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000995  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000656  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041e  00000000  00000000  000015b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000447  00000000  00000000  00001dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 45 02 	jmp	0x48a	; 0x48a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	//DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection);
	DIO_SetPinDirection(15,1);
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	8f e0       	ldi	r24, 0x0F	; 15
  70:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	
    DIO_SetPinDirection(14,1);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	8e e0       	ldi	r24, 0x0E	; 14
  78:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(13,1);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	8d e0       	ldi	r24, 0x0D	; 13
  80:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(12,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	8c e0       	ldi	r24, 0x0C	; 12
  88:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
    
	DIO_SetPinDirection(10,0);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	8a e0       	ldi	r24, 0x0A	; 10
  90:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	
	uint8 i=0;
	
	DIO_WritePin(13,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	8d e0       	ldi	r24, 0x0D	; 13
  98:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
	DIO_WritePin(14,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
	DIO_WritePin(15,0);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
	
	DIO_SetPinDirection(12,1);
    
	DIO_SetPinDirection(10,0);
	
	uint8 i=0;
  ac:	c0 e0       	ldi	r28, 0x00	; 0
	  timer_init();
	  
	   switch(i)
	   {
		   case 0: DIO_WritePin(13,1); DIO_WritePin(14,0);  DIO_WritePin(15,0); timer_delay(1000); i=1; break;
		   case 1: DIO_WritePin(14,1); DIO_WritePin(13,0);  DIO_WritePin(15,0); timer_delay(1000); i=2; break;
  ae:	d2 e0       	ldi	r29, 0x02	; 2
		  case 1: DIO_WritePin(14,1); DIO_WritePin(13,0);  DIO_WritePin(15,0); delay(500000); i=2; break;
		 case 2: DIO_WritePin(15,1); DIO_WritePin(14,0);  DIO_WritePin(13,0); delay(500000); i=0; break;
		   
	   }
		*/
	  if(  DIO_ReadPin(10) == 1 )
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_ReadPin>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	99 f4       	brne	.+38     	; 0xe0 <main+0x74>
	  {
		  timer_delay(50);
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 38 02 	call	0x470	; 0x470 <timer_delay>
		  if(DIO_ReadPin(10) == 1 )
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_ReadPin>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	51 f4       	brne	.+20     	; 0xe0 <main+0x74>
		  {
			button =1;
		   while(DIO_ReadPin(10) == 1 && button==1);
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_ReadPin>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	d9 f3       	breq	.-10     	; 0xcc <main+0x60>
		   if(DIO_ReadPin(10) == 0 && button==1) {i=1; button=0;}
  d6:	8a e0       	ldi	r24, 0x0A	; 10
  d8:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_ReadPin>
  dc:	88 23       	and	r24, r24
  de:	f1 f1       	breq	.+124    	; 0x15c <main+0xf0>
		  }
			  
	  }
	  
	  timer_init();
  e0:	0e 94 32 02 	call	0x464	; 0x464 <timer_init>
	  
	   switch(i)
  e4:	c1 30       	cpi	r28, 0x01	; 1
  e6:	b1 f0       	breq	.+44     	; 0x114 <main+0xa8>
  e8:	18 f0       	brcs	.+6      	; 0xf0 <main+0x84>
  ea:	c2 30       	cpi	r28, 0x02	; 2
  ec:	29 f1       	breq	.+74     	; 0x138 <main+0xcc>
  ee:	e0 cf       	rjmp	.-64     	; 0xb0 <main+0x44>
	   {
		   case 0: DIO_WritePin(13,1); DIO_WritePin(14,0);  DIO_WritePin(15,0); timer_delay(1000); i=1; break;
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8e e0       	ldi	r24, 0x0E	; 14
  fc:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 108:	88 ee       	ldi	r24, 0xE8	; 232
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	0e 94 38 02 	call	0x470	; 0x470 <timer_delay>
 110:	c1 e0       	ldi	r28, 0x01	; 1
 112:	ce cf       	rjmp	.-100    	; 0xb0 <main+0x44>
		   case 1: DIO_WritePin(14,1); DIO_WritePin(13,0);  DIO_WritePin(15,0); timer_delay(1000); i=2; break;
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8d e0       	ldi	r24, 0x0D	; 13
 120:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	0e 94 38 02 	call	0x470	; 0x470 <timer_delay>
 134:	cd 2f       	mov	r28, r29
 136:	bc cf       	rjmp	.-136    	; 0xb0 <main+0x44>
		   case 2: DIO_WritePin(15,1); DIO_WritePin(14,0);  DIO_WritePin(13,0); timer_delay(1000); i=0; break;
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	8e e0       	ldi	r24, 0x0E	; 14
 144:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8d e0       	ldi	r24, 0x0D	; 13
 14c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 150:	88 ee       	ldi	r24, 0xE8	; 232
 152:	93 e0       	ldi	r25, 0x03	; 3
 154:	0e 94 38 02 	call	0x470	; 0x470 <timer_delay>
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	aa cf       	rjmp	.-172    	; 0xb0 <main+0x44>
		   if(DIO_ReadPin(10) == 0 && button==1) {i=1; button=0;}
		  }
			  
	  }
	  
	  timer_init();
 15c:	0e 94 32 02 	call	0x464	; 0x464 <timer_init>
 160:	d9 cf       	rjmp	.-78     	; 0x114 <main+0xa8>

00000162 <DIO_WritePin>:



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
	if (PinValue ==1)  
 162:	61 30       	cpi	r22, 0x01	; 1
 164:	09 f0       	breq	.+2      	; 0x168 <DIO_WritePin+0x6>
 166:	43 c0       	rjmp	.+134    	; 0x1ee <DIO_WritePin+0x8c>
	{
		if(PinNum>=0 && PinNum<=7)
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	68 f4       	brcc	.+26     	; 0x186 <DIO_WritePin+0x24>
		Set_Bit(PORTA,(PinNum));
 16c:	4b b3       	in	r20, 0x1b	; 27
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_WritePin+0x18>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	8a 95       	dec	r24
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_WritePin+0x14>
 17e:	cb 01       	movw	r24, r22
 180:	84 2b       	or	r24, r20
 182:	8b bb       	out	0x1b, r24	; 27
 184:	08 95       	ret
		
		else if (PinNum>=8 && PinNum<=15)
 186:	98 ef       	ldi	r25, 0xF8	; 248
 188:	98 0f       	add	r25, r24
 18a:	98 30       	cpi	r25, 0x08	; 8
 18c:	68 f4       	brcc	.+26     	; 0x1a8 <DIO_WritePin+0x46>
		Set_Bit(PORTB,(PinNum-8));
 18e:	48 b3       	in	r20, 0x18	; 24
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_WritePin+0x3a>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	9a 95       	dec	r25
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_WritePin+0x36>
 1a0:	cb 01       	movw	r24, r22
 1a2:	84 2b       	or	r24, r20
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	08 95       	ret
		
		else if (PinNum>=16 && PinNum<=23)
 1a8:	90 ef       	ldi	r25, 0xF0	; 240
 1aa:	98 0f       	add	r25, r24
 1ac:	98 30       	cpi	r25, 0x08	; 8
 1ae:	68 f4       	brcc	.+26     	; 0x1ca <DIO_WritePin+0x68>
		Set_Bit(PORTC,(PinNum-16));
 1b0:	45 b3       	in	r20, 0x15	; 21
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_WritePin+0x5c>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	9a 95       	dec	r25
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_WritePin+0x58>
 1c2:	cb 01       	movw	r24, r22
 1c4:	84 2b       	or	r24, r20
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	08 95       	ret
		
		else if (PinNum>=24 && PinNum<=31)
 1ca:	98 ee       	ldi	r25, 0xE8	; 232
 1cc:	98 0f       	add	r25, r24
 1ce:	98 30       	cpi	r25, 0x08	; 8
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <DIO_WritePin+0x72>
 1d2:	54 c0       	rjmp	.+168    	; 0x27c <DIO_WritePin+0x11a>
		Set_Bit(PORTD,(PinNum-24));
 1d4:	42 b3       	in	r20, 0x12	; 18
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_WritePin+0x80>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	9a 95       	dec	r25
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_WritePin+0x7c>
 1e6:	cb 01       	movw	r24, r22
 1e8:	84 2b       	or	r24, r20
 1ea:	82 bb       	out	0x12, r24	; 18
 1ec:	08 95       	ret
	}
	
	else if (PinValue ==0)
 1ee:	61 11       	cpse	r22, r1
 1f0:	45 c0       	rjmp	.+138    	; 0x27c <DIO_WritePin+0x11a>
	{
		if(PinNum>=0 && PinNum<=7)
 1f2:	88 30       	cpi	r24, 0x08	; 8
 1f4:	70 f4       	brcc	.+28     	; 0x212 <DIO_WritePin+0xb0>
		Clear_Bit(PORTA,(PinNum));
 1f6:	4b b3       	in	r20, 0x1b	; 27
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	b9 01       	movw	r22, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritePin+0xa2>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	8a 95       	dec	r24
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritePin+0x9e>
 208:	cb 01       	movw	r24, r22
 20a:	80 95       	com	r24
 20c:	84 23       	and	r24, r20
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
		
		else if (PinNum>=8 && PinNum<=15)
 212:	98 ef       	ldi	r25, 0xF8	; 248
 214:	98 0f       	add	r25, r24
 216:	98 30       	cpi	r25, 0x08	; 8
 218:	70 f4       	brcc	.+28     	; 0x236 <DIO_WritePin+0xd4>
		Clear_Bit(PORTB,(PinNum-8));
 21a:	48 b3       	in	r20, 0x18	; 24
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WritePin+0xc6>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	9a 95       	dec	r25
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WritePin+0xc2>
 22c:	cb 01       	movw	r24, r22
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret
		
		else if (PinNum>=16 && PinNum<=23)
 236:	90 ef       	ldi	r25, 0xF0	; 240
 238:	98 0f       	add	r25, r24
 23a:	98 30       	cpi	r25, 0x08	; 8
 23c:	70 f4       	brcc	.+28     	; 0x25a <DIO_WritePin+0xf8>
		Clear_Bit(PORTC,(PinNum-16));
 23e:	45 b3       	in	r20, 0x15	; 21
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_WritePin+0xea>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	9a 95       	dec	r25
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_WritePin+0xe6>
 250:	cb 01       	movw	r24, r22
 252:	80 95       	com	r24
 254:	84 23       	and	r24, r20
 256:	85 bb       	out	0x15, r24	; 21
 258:	08 95       	ret
		
		else if (PinNum>=24 && PinNum<=31)
 25a:	98 ee       	ldi	r25, 0xE8	; 232
 25c:	98 0f       	add	r25, r24
 25e:	98 30       	cpi	r25, 0x08	; 8
 260:	68 f4       	brcc	.+26     	; 0x27c <DIO_WritePin+0x11a>
		Clear_Bit(PORTD,(PinNum-24));
 262:	42 b3       	in	r20, 0x12	; 18
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_WritePin+0x10e>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	9a 95       	dec	r25
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_WritePin+0x10a>
 274:	cb 01       	movw	r24, r22
 276:	80 95       	com	r24
 278:	84 23       	and	r24, r20
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret

0000027e <DIO_ReadPin>:
	
	
}
uint8 DIO_ReadPin(uint8 PinNum)
{
  if(PinNum>=0 && PinNum<=7)
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	a0 f4       	brcc	.+40     	; 0x2aa <DIO_ReadPin+0x2c>
  return (Get_Bit(PinA, PinNum ) );
 282:	49 b3       	in	r20, 0x19	; 25
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	08 2e       	mov	r0, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_ReadPin+0x12>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_ReadPin+0xe>
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	24 23       	and	r18, r20
 298:	35 23       	and	r19, r21
 29a:	a9 01       	movw	r20, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_ReadPin+0x24>
 29e:	55 95       	asr	r21
 2a0:	47 95       	ror	r20
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_ReadPin+0x20>
 2a6:	ca 01       	movw	r24, r20
 2a8:	08 95       	ret
  
  else if (PinNum>=8 && PinNum<=15)
 2aa:	98 ef       	ldi	r25, 0xF8	; 248
 2ac:	98 0f       	add	r25, r24
 2ae:	98 30       	cpi	r25, 0x08	; 8
 2b0:	b0 f4       	brcc	.+44     	; 0x2de <DIO_ReadPin+0x60>
  return (Get_Bit(PinB,(PinNum- 8) ) );
 2b2:	26 b3       	in	r18, 0x16	; 22
 2b4:	48 2f       	mov	r20, r24
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	48 50       	subi	r20, 0x08	; 8
 2ba:	51 09       	sbc	r21, r1
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	04 2e       	mov	r0, r20
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_ReadPin+0x4a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_ReadPin+0x46>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_ReadPin+0x5a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	4a 95       	dec	r20
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_ReadPin+0x56>
 2dc:	08 95       	ret
  
  else if (PinNum>=16 && PinNum<=23)
 2de:	90 ef       	ldi	r25, 0xF0	; 240
 2e0:	98 0f       	add	r25, r24
 2e2:	98 30       	cpi	r25, 0x08	; 8
 2e4:	b0 f4       	brcc	.+44     	; 0x312 <DIO_ReadPin+0x94>
  return (Get_Bit(PinC,(PinNum- 16 ) ) );
 2e6:	23 b3       	in	r18, 0x13	; 19
 2e8:	48 2f       	mov	r20, r24
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	40 51       	subi	r20, 0x10	; 16
 2ee:	51 09       	sbc	r21, r1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	04 2e       	mov	r0, r20
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_ReadPin+0x7e>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_ReadPin+0x7a>
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	82 23       	and	r24, r18
 304:	93 23       	and	r25, r19
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_ReadPin+0x8e>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	4a 95       	dec	r20
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_ReadPin+0x8a>
 310:	08 95       	ret
  
  else if (PinNum>=24 && PinNum<=31)
 312:	98 ee       	ldi	r25, 0xE8	; 232
 314:	98 0f       	add	r25, r24
 316:	98 30       	cpi	r25, 0x08	; 8
 318:	b0 f4       	brcc	.+44     	; 0x346 <DIO_ReadPin+0xc8>
  return (Get_Bit(PinD, (PinNum- 24 ) ) );
 31a:	20 b3       	in	r18, 0x10	; 16
 31c:	48 2f       	mov	r20, r24
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	48 51       	subi	r20, 0x18	; 24
 322:	51 09       	sbc	r21, r1
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	04 2e       	mov	r0, r20
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_ReadPin+0xb2>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_ReadPin+0xae>
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	82 23       	and	r24, r18
 338:	93 23       	and	r25, r19
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_ReadPin+0xc2>
 33c:	95 95       	asr	r25
 33e:	87 95       	ror	r24
 340:	4a 95       	dec	r20
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_ReadPin+0xbe>
 344:	08 95       	ret
  }
 346:	08 95       	ret

00000348 <DIO_SetPinDirection>:
  
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
		if (PinDirection ==1)
 348:	61 30       	cpi	r22, 0x01	; 1
 34a:	09 f0       	breq	.+2      	; 0x34e <DIO_SetPinDirection+0x6>
 34c:	43 c0       	rjmp	.+134    	; 0x3d4 <DIO_SetPinDirection+0x8c>
		{
			if(PinNum>=0 && PinNum<=7)
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	68 f4       	brcc	.+26     	; 0x36c <DIO_SetPinDirection+0x24>
			Set_Bit(DDRA,(PinNum) );
 352:	4a b3       	in	r20, 0x1a	; 26
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_SetPinDirection+0x18>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	8a 95       	dec	r24
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_SetPinDirection+0x14>
 364:	cb 01       	movw	r24, r22
 366:	84 2b       	or	r24, r20
 368:	8a bb       	out	0x1a, r24	; 26
 36a:	08 95       	ret
			
			else if (PinNum>=8 && PinNum<=15)
 36c:	98 ef       	ldi	r25, 0xF8	; 248
 36e:	98 0f       	add	r25, r24
 370:	98 30       	cpi	r25, 0x08	; 8
 372:	68 f4       	brcc	.+26     	; 0x38e <DIO_SetPinDirection+0x46>
			Set_Bit(DDRB,(PinNum-8) );
 374:	47 b3       	in	r20, 0x17	; 23
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_SetPinDirection+0x3a>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	9a 95       	dec	r25
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_SetPinDirection+0x36>
 386:	cb 01       	movw	r24, r22
 388:	84 2b       	or	r24, r20
 38a:	87 bb       	out	0x17, r24	; 23
 38c:	08 95       	ret
			
			else if (PinNum>=16 && PinNum<=23)
 38e:	90 ef       	ldi	r25, 0xF0	; 240
 390:	98 0f       	add	r25, r24
 392:	98 30       	cpi	r25, 0x08	; 8
 394:	68 f4       	brcc	.+26     	; 0x3b0 <DIO_SetPinDirection+0x68>
			Set_Bit(DDRC,(PinNum-16) );
 396:	44 b3       	in	r20, 0x14	; 20
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	b9 01       	movw	r22, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinDirection+0x5c>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	9a 95       	dec	r25
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinDirection+0x58>
 3a8:	cb 01       	movw	r24, r22
 3aa:	84 2b       	or	r24, r20
 3ac:	84 bb       	out	0x14, r24	; 20
 3ae:	08 95       	ret
			
			else if (PinNum>=24 && PinNum<=31)
 3b0:	98 ee       	ldi	r25, 0xE8	; 232
 3b2:	98 0f       	add	r25, r24
 3b4:	98 30       	cpi	r25, 0x08	; 8
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <DIO_SetPinDirection+0x72>
 3b8:	54 c0       	rjmp	.+168    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			Set_Bit(DDRD,(PinNum-24) );
 3ba:	41 b3       	in	r20, 0x11	; 17
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	b9 01       	movw	r22, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_SetPinDirection+0x80>
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	9a 95       	dec	r25
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_SetPinDirection+0x7c>
 3cc:	cb 01       	movw	r24, r22
 3ce:	84 2b       	or	r24, r20
 3d0:	81 bb       	out	0x11, r24	; 17
 3d2:	08 95       	ret
		}
		
		else if (PinDirection == 0)
 3d4:	61 11       	cpse	r22, r1
 3d6:	45 c0       	rjmp	.+138    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			if(PinNum>=0 && PinNum<=7)
 3d8:	88 30       	cpi	r24, 0x08	; 8
 3da:	70 f4       	brcc	.+28     	; 0x3f8 <DIO_SetPinDirection+0xb0>
			Clear_Bit(DDRA,PinNum);
 3dc:	4a b3       	in	r20, 0x1a	; 26
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_SetPinDirection+0xa2>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_SetPinDirection+0x9e>
 3ee:	cb 01       	movw	r24, r22
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8a bb       	out	0x1a, r24	; 26
 3f6:	08 95       	ret
			
			else if (PinNum>=8 && PinNum<=15)
 3f8:	98 ef       	ldi	r25, 0xF8	; 248
 3fa:	98 0f       	add	r25, r24
 3fc:	98 30       	cpi	r25, 0x08	; 8
 3fe:	70 f4       	brcc	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			Clear_Bit(DDRB,(PinNum-8));
 400:	47 b3       	in	r20, 0x17	; 23
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	9a 95       	dec	r25
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	87 bb       	out	0x17, r24	; 23
 41a:	08 95       	ret
			
			else if (PinNum>=16 && PinNum<=23)
 41c:	90 ef       	ldi	r25, 0xF0	; 240
 41e:	98 0f       	add	r25, r24
 420:	98 30       	cpi	r25, 0x08	; 8
 422:	70 f4       	brcc	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			Clear_Bit(DDRC,(PinNum-16));
 424:	44 b3       	in	r20, 0x14	; 20
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	9a 95       	dec	r25
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	84 bb       	out	0x14, r24	; 20
 43e:	08 95       	ret
			
			else if (PinNum>=24 && PinNum<=31)
 440:	98 ee       	ldi	r25, 0xE8	; 232
 442:	98 0f       	add	r25, r24
 444:	98 30       	cpi	r25, 0x08	; 8
 446:	68 f4       	brcc	.+26     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			Clear_Bit(DDRD,(PinNum-24));
 448:	41 b3       	in	r20, 0x11	; 17
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	9a 95       	dec	r25
 458:	e2 f7       	brpl	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45a:	cb 01       	movw	r24, r22
 45c:	80 95       	com	r24
 45e:	84 23       	and	r24, r20
 460:	81 bb       	out	0x11, r24	; 17
 462:	08 95       	ret

00000464 <timer_init>:
#include "delay.h"
#include "Timer.h"

void timer_init()
{
	TCCR0=0x8b;
 464:	8b e8       	ldi	r24, 0x8B	; 139
 466:	83 bf       	out	0x33, r24	; 51
	 
	OCR0=250;
 468:	8a ef       	ldi	r24, 0xFA	; 250
 46a:	8c bf       	out	0x3c, r24	; 60
	
	TCNT0=0;
 46c:	12 be       	out	0x32, r1	; 50
 46e:	08 95       	ret

00000470 <timer_delay>:
}

void timer_delay(uint32 mill)
{
 470:	9c 01       	movw	r18, r24
	uint32 M=0; M=mill;
	while(M>0)
 472:	89 2b       	or	r24, r25
 474:	49 f0       	breq	.+18     	; 0x488 <timer_delay+0x18>
	{
		while(Get_Bit(TIFR,1)==0); Set_Bit(TIFR,1);
 476:	08 b6       	in	r0, 0x38	; 56
 478:	01 fe       	sbrs	r0, 1
 47a:	fd cf       	rjmp	.-6      	; 0x476 <timer_delay+0x6>
 47c:	98 b7       	in	r25, 0x38	; 56
 47e:	92 60       	ori	r25, 0x02	; 2
 480:	98 bf       	out	0x38, r25	; 56
		M--;
 482:	21 50       	subi	r18, 0x01	; 1
 484:	31 09       	sbc	r19, r1
}

void timer_delay(uint32 mill)
{
	uint32 M=0; M=mill;
	while(M>0)
 486:	b9 f7       	brne	.-18     	; 0x476 <timer_delay+0x6>
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>

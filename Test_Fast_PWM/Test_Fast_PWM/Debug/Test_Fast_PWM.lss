
Test_Fast_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097f  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071b  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ed  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000458  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004dd  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  64:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:
	else if (PinNum>=PC0 && PinNum<=PC7)
	return (GET_BIT(PINC,(PinNum-PC0 ) ) );
	
	else if (PinNum>=PD0 && PinNum<=PD7)
	return (GET_BIT(PIND, (PinNum-PD0 ) ) );
}
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	09 f0       	breq	.+2      	; 0x72 <DIO_WritePin+0x6>
  70:	43 c0       	rjmp	.+134    	; 0xf8 <DIO_WritePin+0x8c>
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	68 f4       	brcc	.+26     	; 0x90 <DIO_WritePin+0x24>
  76:	4b b3       	in	r20, 0x1b	; 27
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	b9 01       	movw	r22, r18
  7e:	02 c0       	rjmp	.+4      	; 0x84 <DIO_WritePin+0x18>
  80:	66 0f       	add	r22, r22
  82:	77 1f       	adc	r23, r23
  84:	8a 95       	dec	r24
  86:	e2 f7       	brpl	.-8      	; 0x80 <DIO_WritePin+0x14>
  88:	cb 01       	movw	r24, r22
  8a:	84 2b       	or	r24, r20
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret
  90:	98 ef       	ldi	r25, 0xF8	; 248
  92:	98 0f       	add	r25, r24
  94:	98 30       	cpi	r25, 0x08	; 8
  96:	68 f4       	brcc	.+26     	; 0xb2 <DIO_WritePin+0x46>
  98:	48 b3       	in	r20, 0x18	; 24
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	b9 01       	movw	r22, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_WritePin+0x3a>
  a2:	66 0f       	add	r22, r22
  a4:	77 1f       	adc	r23, r23
  a6:	9a 95       	dec	r25
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_WritePin+0x36>
  aa:	cb 01       	movw	r24, r22
  ac:	84 2b       	or	r24, r20
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret
  b2:	90 ef       	ldi	r25, 0xF0	; 240
  b4:	98 0f       	add	r25, r24
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	68 f4       	brcc	.+26     	; 0xd4 <DIO_WritePin+0x68>
  ba:	45 b3       	in	r20, 0x15	; 21
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	b9 01       	movw	r22, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_WritePin+0x5c>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	9a 95       	dec	r25
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_WritePin+0x58>
  cc:	cb 01       	movw	r24, r22
  ce:	84 2b       	or	r24, r20
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	08 95       	ret
  d4:	98 ee       	ldi	r25, 0xE8	; 232
  d6:	98 0f       	add	r25, r24
  d8:	98 30       	cpi	r25, 0x08	; 8
  da:	08 f0       	brcs	.+2      	; 0xde <DIO_WritePin+0x72>
  dc:	54 c0       	rjmp	.+168    	; 0x186 <DIO_WritePin+0x11a>
  de:	42 b3       	in	r20, 0x12	; 18
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_WritePin+0x80>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	9a 95       	dec	r25
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_WritePin+0x7c>
  f0:	cb 01       	movw	r24, r22
  f2:	84 2b       	or	r24, r20
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	08 95       	ret
  f8:	61 11       	cpse	r22, r1
  fa:	45 c0       	rjmp	.+138    	; 0x186 <DIO_WritePin+0x11a>
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	70 f4       	brcc	.+28     	; 0x11c <DIO_WritePin+0xb0>
 100:	4b b3       	in	r20, 0x1b	; 27
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_WritePin+0xa2>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_WritePin+0x9e>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret
 11c:	98 ef       	ldi	r25, 0xF8	; 248
 11e:	98 0f       	add	r25, r24
 120:	98 30       	cpi	r25, 0x08	; 8
 122:	70 f4       	brcc	.+28     	; 0x140 <DIO_WritePin+0xd4>
 124:	48 b3       	in	r20, 0x18	; 24
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_WritePin+0xc6>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_WritePin+0xc2>
 136:	cb 01       	movw	r24, r22
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	08 95       	ret
 140:	90 ef       	ldi	r25, 0xF0	; 240
 142:	98 0f       	add	r25, r24
 144:	98 30       	cpi	r25, 0x08	; 8
 146:	70 f4       	brcc	.+28     	; 0x164 <DIO_WritePin+0xf8>
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritePin+0xea>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritePin+0xe6>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
 164:	98 ee       	ldi	r25, 0xE8	; 232
 166:	98 0f       	add	r25, r24
 168:	98 30       	cpi	r25, 0x08	; 8
 16a:	68 f4       	brcc	.+26     	; 0x186 <DIO_WritePin+0x11a>
 16c:	42 b3       	in	r20, 0x12	; 18
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_WritePin+0x10e>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	9a 95       	dec	r25
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_WritePin+0x10a>
 17e:	cb 01       	movw	r24, r22
 180:	80 95       	com	r24
 182:	84 23       	and	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret

00000188 <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if (PinDirection == OUTPUT)
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_SetPinDirection+0x6>
 18c:	43 c0       	rjmp	.+134    	; 0x214 <DIO_SetPinDirection+0x8c>
	{
		if(PinNum>=PA0 && PinNum<=PA7)
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	68 f4       	brcc	.+26     	; 0x1ac <DIO_SetPinDirection+0x24>
		SET_BIT(DDRA,(PinNum) );
 192:	4a b3       	in	r20, 0x1a	; 26
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0x18>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0x14>
 1a4:	cb 01       	movw	r24, r22
 1a6:	84 2b       	or	r24, r20
 1a8:	8a bb       	out	0x1a, r24	; 26
 1aa:	08 95       	ret
		
		else if (PinNum>=PB0 && PinNum<=PB7)
 1ac:	98 ef       	ldi	r25, 0xF8	; 248
 1ae:	98 0f       	add	r25, r24
 1b0:	98 30       	cpi	r25, 0x08	; 8
 1b2:	68 f4       	brcc	.+26     	; 0x1ce <DIO_SetPinDirection+0x46>
		SET_BIT(DDRB,(PinNum-PB0) );
 1b4:	47 b3       	in	r20, 0x17	; 23
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDirection+0x3a>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	9a 95       	dec	r25
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDirection+0x36>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	87 bb       	out	0x17, r24	; 23
 1cc:	08 95       	ret
		
		else if (PinNum>=PC0 && PinNum<=PC7)
 1ce:	90 ef       	ldi	r25, 0xF0	; 240
 1d0:	98 0f       	add	r25, r24
 1d2:	98 30       	cpi	r25, 0x08	; 8
 1d4:	68 f4       	brcc	.+26     	; 0x1f0 <DIO_SetPinDirection+0x68>
		SET_BIT(DDRC,(PinNum-PC0) );
 1d6:	44 b3       	in	r20, 0x14	; 20
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinDirection+0x5c>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	9a 95       	dec	r25
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinDirection+0x58>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 2b       	or	r24, r20
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
		
		else if (PinNum>=PD0 && PinNum<=PD7)
 1f0:	98 ee       	ldi	r25, 0xE8	; 232
 1f2:	98 0f       	add	r25, r24
 1f4:	98 30       	cpi	r25, 0x08	; 8
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <DIO_SetPinDirection+0x72>
 1f8:	54 c0       	rjmp	.+168    	; 0x2a2 <DIO_SetPinDirection+0x11a>
		SET_BIT(DDRD,(PinNum-PD0) );
 1fa:	41 b3       	in	r20, 0x11	; 17
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinDirection+0x80>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	9a 95       	dec	r25
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinDirection+0x7c>
 20c:	cb 01       	movw	r24, r22
 20e:	84 2b       	or	r24, r20
 210:	81 bb       	out	0x11, r24	; 17
 212:	08 95       	ret
	}
	
	else if (PinDirection == INPUT)
 214:	61 11       	cpse	r22, r1
 216:	45 c0       	rjmp	.+138    	; 0x2a2 <DIO_SetPinDirection+0x11a>
	{
		if(PinNum>=PA0 && PinNum<=PA7)
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	70 f4       	brcc	.+28     	; 0x238 <DIO_SetPinDirection+0xb0>
		CLEAR_BIT(DDRA,PinNum);
 21c:	4a b3       	in	r20, 0x1a	; 26
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinDirection+0xa2>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinDirection+0x9e>
 22e:	cb 01       	movw	r24, r22
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8a bb       	out	0x1a, r24	; 26
 236:	08 95       	ret
		
		else if (PinNum>=PB0 && PinNum<=PB7)
 238:	98 ef       	ldi	r25, 0xF8	; 248
 23a:	98 0f       	add	r25, r24
 23c:	98 30       	cpi	r25, 0x08	; 8
 23e:	70 f4       	brcc	.+28     	; 0x25c <DIO_SetPinDirection+0xd4>
		CLEAR_BIT(DDRB,(PinNum-PB0));
 240:	47 b3       	in	r20, 0x17	; 23
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinDirection+0xc6>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	9a 95       	dec	r25
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinDirection+0xc2>
 252:	cb 01       	movw	r24, r22
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	87 bb       	out	0x17, r24	; 23
 25a:	08 95       	ret
		
		else if (PinNum>=PC0 && PinNum<=PC7)
 25c:	90 ef       	ldi	r25, 0xF0	; 240
 25e:	98 0f       	add	r25, r24
 260:	98 30       	cpi	r25, 0x08	; 8
 262:	70 f4       	brcc	.+28     	; 0x280 <DIO_SetPinDirection+0xf8>
		CLEAR_BIT(DDRC,(PinNum-PC0));
 264:	44 b3       	in	r20, 0x14	; 20
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SetPinDirection+0xea>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	9a 95       	dec	r25
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SetPinDirection+0xe6>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	84 bb       	out	0x14, r24	; 20
 27e:	08 95       	ret
		
		else if (PinNum>=PD0 && PinNum<=PD7)
 280:	98 ee       	ldi	r25, 0xE8	; 232
 282:	98 0f       	add	r25, r24
 284:	98 30       	cpi	r25, 0x08	; 8
 286:	68 f4       	brcc	.+26     	; 0x2a2 <DIO_SetPinDirection+0x11a>
		CLEAR_BIT(DDRD,(PinNum-PD0));
 288:	41 b3       	in	r20, 0x11	; 17
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_SetPinDirection+0x10e>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	9a 95       	dec	r25
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_SetPinDirection+0x10a>
 29a:	cb 01       	movw	r24, r22
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	81 bb       	out	0x11, r24	; 17
 2a2:	08 95       	ret

000002a4 <Test_Motor1>:


void Test_Motor1(uint16 duty)
{
	
	INIT_FPWM(duty);
 2a4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <INIT_FPWM>
	
	DIO_WritePin(M1A,LOW);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	8a e1       	ldi	r24, 0x1A	; 26
 2ac:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(M1B,HIGH);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8b e1       	ldi	r24, 0x1B	; 27
 2b4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	2f e7       	ldi	r18, 0x7F	; 127
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	9e e1       	ldi	r25, 0x1E	; 30
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <Test_Motor1+0x1a>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <Test_Motor1+0x24>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <main>:

int main(void)
{	


 Test_Motor1(HALF_DUTY);
 2cc:	88 ee       	ldi	r24, 0xE8	; 232
 2ce:	93 e0       	ldi	r25, 0x03	; 3
 2d0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Test_Motor1>
 

 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret

000002da <DIO_INIT_M1>:
/* Function to initialize Motor2 Pins*/
void DIO_INIT_M2()
{
	DIO_SetPinDirection(M2_EN_OC1A,OUTPUT);
	DIO_SetPinDirection(M2A,OUTPUT);
	DIO_SetPinDirection(M2B,OUTPUT);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	8a e1       	ldi	r24, 0x1A	; 26
 2de:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	8b e1       	ldi	r24, 0x1B	; 27
 2e6:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	8c e1       	ldi	r24, 0x1C	; 28
 2ee:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
 2f2:	08 95       	ret

000002f4 <INIT_FPWM>:
}

/* Function to initialize fast PWM*/
void INIT_FPWM(uint16 COMPARE)
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	c8 2f       	mov	r28, r24
 2fa:	d9 2f       	mov	r29, r25
	    DIO_INIT_M1();
 2fc:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_INIT_M1>
	
		ICR1H=(TOP>>HIGH_REG);
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	87 bd       	out	0x27, r24	; 39
		ICR1L=(TOP);
 304:	80 ed       	ldi	r24, 0xD0	; 208
 306:	86 bd       	out	0x26, r24	; 38
		
		OCR1AH=(COMPARE>>HIGH_REG);
 308:	db bd       	out	0x2b, r29	; 43
		OCR1AL=(COMPARE);	
 30a:	ca bd       	out	0x2a, r28	; 42
		
		SET_BIT(TCCR1B,CS10);
 30c:	8e b5       	in	r24, 0x2e	; 46
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	8e bd       	out	0x2e, r24	; 46
		
	    SET_BIT(TCCR1A,WGM11);
 312:	8f b5       	in	r24, 0x2f	; 47
 314:	82 60       	ori	r24, 0x02	; 2
 316:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1B,WGM12);
 318:	8e b5       	in	r24, 0x2e	; 46
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,WGM13);
 31e:	8e b5       	in	r24, 0x2e	; 46
 320:	80 61       	ori	r24, 0x10	; 16
 322:	8e bd       	out	0x2e, r24	; 46

		SET_BIT(TCCR1A,COM1B0);
 324:	8f b5       	in	r24, 0x2f	; 47
 326:	80 61       	ori	r24, 0x10	; 16
 328:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,COM1B1);
 32a:	8f b5       	in	r24, 0x2f	; 47
 32c:	80 62       	ori	r24, 0x20	; 32
 32e:	8f bd       	out	0x2f, r24	; 47
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
